package rules.backward

import com.ftn.sbnz.model.models.Machine
import com.ftn.sbnz.model.models.DroolsLog
import java.util.Arrays;
import java.util.List; // Dodata List za eksplicitniju deklaraciju

dialect "java"

// ---------------------------------------------------------------------
// DECLARATIONS
// ---------------------------------------------------------------------
declare HypothesisDependency
    conclusion : String
    prerequisites : java.util.List
end

declare DiagnosisComplete
    machineId : String
    hypothesis : String
end

// ---------------------------------------------------------------------
// INITIALIZATION OF DEPENDENCY GRAPH
// ---------------------------------------------------------------------
rule "Init backward dependencies"
    salience 100
when
    not(HypothesisDependency())
then
    System.out.println("Initializing backward dependency graph...");

    // --- Top-level goals ---
    insert(new HypothesisDependency("AtRisk", Arrays.asList("TwoAnomaliesIn")));
    insert(new HypothesisDependency("BearingFault", Arrays.asList("VibrationHigh", "TemperatureHigh")));
    insert(new HypothesisDependency("Imbalance", Arrays.asList("VibrationHigh")));
    insert(new HypothesisDependency("Overheat", Arrays.asList("TemperatureHigh")));
    insert(new HypothesisDependency("ElectricalOverload", Arrays.asList("CurrentHigh", "RecentOverload")));

    // --- Derived relations ---
    insert(new HypothesisDependency("TwoAnomaliesIn", Arrays.asList("VibrationHigh", "TemperatureHigh")));
    insert(new HypothesisDependency("VibrationHigh",  Arrays.asList("AskableVibration")));
    insert(new HypothesisDependency("TemperatureHigh", Arrays.asList("AskableTemperature")));
    insert(new HypothesisDependency("CurrentHigh", Arrays.asList("AskableCurrent")));
    insert(new HypothesisDependency("RecentOverload", Arrays.asList("AskableOverload")));
end

// ---------------------------------------------------------------------
// LOGGING HELPERS
// ---------------------------------------------------------------------
rule "Log dependency map"
salience 50
when
    $dep : HypothesisDependency($c : conclusion, $p : prerequisites)
then
    System.out.println("[Dependency] " + $c + " -> " + $p);
end

// ---------------------------------------------------------------------
// QUERY: proveHypothesis
// ---------------------------------------------------------------------
query proveHypothesis( String $hypothesis, String $machineId )
    (
        // --- BASE CASES ---
        eval(DroolsLog.log("Checking base case for: " + $hypothesis + " on machine " + $machineId))
        and
        (
            ( eval($hypothesis.equals("AskableVibration")) and exists(Machine(id == $machineId, vibration > 7.1)) ) or
            ( eval($hypothesis.equals("AskableTemperature")) and exists(Machine(id == $machineId, temperature > 85)) ) or
            ( eval($hypothesis.equals("AskableCurrent")) and exists(Machine(id == $machineId, currentPercentOfRated > 100)) ) or
            ( eval($hypothesis.equals("AskableOverload")) and exists(Machine(id == $machineId, overloadTripCount >= 1)) )
        )
        and eval(DroolsLog.log("✅ Base proven: " + $hypothesis + " for " + $machineId))
    )
    or
    (
        // --- RECURSIVE CASE ---
        eval(DroolsLog.log("Recursively proving: " + $hypothesis + " for machine " + $machineId))
        and
        $dep : HypothesisDependency(conclusion == $hypothesis, $pre : prerequisites)
        and
        not (
            String($p : this) from $pre
            and eval(DroolsLog.log("  ↪ Proving subgoal: " + $p + " for " + $machineId))
            and not proveHypothesis($p, $machineId;)
        )
        and eval(DroolsLog.log("Proven recursively: " + $hypothesis + " for " + $machineId))
    )
end

// ---------------------------------------------------------------------
// RULES THAT ACT ON PROVEN HYPOTHESES
// ---------------------------------------------------------------------

// --- If Overheat proven ---
rule "Overheat proven -> escalate machine"
no-loop true
when
    $m : Machine($id : id, status != com.ftn.sbnz.model.enums.MachineStatus.CRITICAL)
    proveHypothesis("Overheat", $id;)
    not DiagnosisComplete(machineId == $id, hypothesis == "Overheat")
then
    $m.setStatus(com.ftn.sbnz.model.enums.MachineStatus.RISKY);
    $m.addRecommendation("Temperatura visoka — proveri hlađenje.");
    update($m);
    insert(new DiagnosisComplete($id, "Overheat"));
    System.out.println("Backward: Overheat proven for " + $m.getName());
end

// --- If BearingFault proven ---
rule "BearingFault proven -> escalate machine"
no-loop true
when
    $m : Machine($id : id, status != com.ftn.sbnz.model.enums.MachineStatus.CRITICAL)
    proveHypothesis("BearingFault", $id;)
    not DiagnosisComplete(machineId == $id, hypothesis == "BearingFault")
then
    $m.setStatus(com.ftn.sbnz.model.enums.MachineStatus.RISKY);
    $m.addRecommendation("Habanje ležaja — proveri balans i podmazivanje.");
    update($m);
    insert(new DiagnosisComplete($id, "BearingFault"));
    System.out.println("Backward: Bearing fault proven for " + $m.getName());
end

// --- If ElectricalOverload proven ---
rule "ElectricalOverload proven -> escalate machine"
no-loop true
when
    $m : Machine($id : id, status != com.ftn.sbnz.model.enums.MachineStatus.CRITICAL)
    proveHypothesis("ElectricalOverload", $id;)
    not DiagnosisComplete(machineId == $id, hypothesis == "ElectricalOverload")
then
    $m.setStatus(com.ftn.sbnz.model.enums.MachineStatus.CRITICAL);
    $m.addRecommendation("Električno preopterećenje — proveri električne komponente.");
    update($m);
    insert(new DiagnosisComplete($id, "ElectricalOverload"));
    System.out.println("Backward: Electrical overload proven for " + $m.getName());
end
